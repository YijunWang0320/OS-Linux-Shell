1.How would you design a system to run an entire operating system as an application on top of another operating system?

  I believe the system refered in this question is similar to virtual machine that I'm using right now.
  I call the upper OS as the "guest OS",and the actual OS as the "host OS"(like the textbook). There are properties that the system should have:
  1.The guest OS should make the user feel that it is like the same OS.
  2.The guest OS should run on user-level because this is only an normal application.This means that the guest OS should not directly manipulates the hardwares.
  3.The host OS should support the instructions coming from the guest OS just like the hardwares support the host OS.
  With my thought and the knowledge coming from Chapter2 of the textbook, I believe the system should work like this:
  1. The applications running on the guest OS should not "realize" that they are running on guest OS. The guest OS should not "realize" that they are running on Virtual Machine(VM).
  2. The VM simulates a virtual disk as a file on the physical disk and the guest OS have access to only that file. Different programs runs as threads in the Virtual Machine's process.(This might not be true because Virtual Machine might run many processes, however this is the simple case)
  3. The VM have to have its own virtual interrupt timer(the way to decide which process to run) which works when the host OS lets the Virtual Machine run on the processor.
  4. The guest OS pass on every system call or exception to the host OS.(The bridge should be the VM)
  5. The host OS should simulates what the system call or exception should do to the guest OS if the guest OS is running on real hardwares.Then the host OS returns the result to the guest OS.
  So, in a nutshell,the most important part is that,the host OS should simulates what hardwares will do if the guest OS is running on real hardwares.And the VM should make the guest OS believe there are real hardwares supporting it.


2.For the computer you are currently using, how should the operating system designers prioritize among reliability,security,portability, performance and adoption?

  I think it is impossible for anybody to use a computer which have absolutely no reliability/portability/performance/adoption, I assume that the current system have normal level of all these properties,which means the system is useable.In this situation, I'll prioritize these abilities.
  I believe for me, reliability is the most important one.Since always crushing will make me desperate. I could be patient if my system is a little slow,or the fact that there aren't much applications(Windows Phone), but I couldn't bear the fact that I have to restart my system once and once again.
  Performance comes next, since I don't really save the really "secret" data on my computer.
  Then comes security. If my computer can be affected just by surfing the internet,and the malicious programs could easily do the things they want,then the system is hardly useable.
  Portability. This characteristic affects adoption.If the portability is bad, then less software developer will build apps on this system, so it would be hard to be adopted by the public. And also, the system programmers would have to make a lot of changes when the hardwares upgrade everytime.
  Adoptability. Compared to other characteristics, I think this comes last.Because a lot of us still use WP while the adoptability is not that good.



3.Can UNIX fork return an error?

  Yes,it can. When fork didn't successfully create a child process, the parent will receive a -1.
  Because we need to do something(fail-safe) if fork fails. For example, we might let the parent process do wait(0) if fork() works, while we might want to print the reason when fork fails. If fork() cannot return an error, we cannot judge whether the system call worked or not. 



4.Can exec return an error?

  Yes,it can. But it only have a return value of -1 when error happens.Since the exec system call blows everything else if it works.
  However, I don't think it needs to return a value when error happens since we could just write the code handling the error under the system call exec().If exec() worked, we would execute what's in exec(),however, it exec() failed,we sould execute whatever under exec().




5. What happens if we run the following program on UNIX?

  If at first,the fork() failed for some reasons, then there won't be a problem.
  However, if the fork() always succeed(at first),then there will be 1->2->4->8->16>32>...>1024>.... processes. This program will keep on creating new processes until there's no memory to allocate, and the OS would be crowded with the processes. At last, we cannot do anything unless we reboot the system.



6.Explain what must happen for UNIX wait to return successfully and immediately?
  When we use the system call wait(),I believe the parent process gives a signal to the OS telling that itself would not use the cpu again until the child process finishes. So the OS put up a sign on the parent process, and the sign is taken off only when the child process finishes. And also, because of the wait() system call, the parent have a pointer pointing to the child process, so the PCB of the process won't be destroyed until the parent process is finished.




7.What happens if you run "exec ls" in a UNIX shell? Why?
  The shell shuts down immediately. Because the exec system call:
	Load the program prog into the current address space.
	Copy arguments args into memory in the address space.
	Initialize the hardware context to start execution at "start".
  The shell process would be replaced by the program "ls".So the shell is gone and the system will run "ls" instead. To users, we will only see the fact that the shell shuts down immediately.




8.How many processes are created if the following program is run?
  If all the fork() system calls succeed, we will create 31 processes.
  n=5 2
  n=4 4
  n=3 8
  n=2 16
  n=1 32
  That's all the processes which exist, however, we got our original process. In conclusion, we will create 31 processes.



9.How many different copies of the variable x are there? What are their values when their process finishes?
  There are 3 copies of x.
  The child after using first fork has x=10;
  The child after using second fork has x=15;
  The parent has x=20;




10. What is the output of the following programs?
  The output of the first program:
	6
	6
  The output of the second program:
	6
